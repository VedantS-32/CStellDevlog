<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3D on CStellDevlog</title>
    <link>http://localhost:1313/CStellDevlog/en/tags/3d/</link>
    <description>Recent content in 3D on CStellDevlog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/CStellDevlog/en/tags/3d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Constellation Engine Blog0</title>
      <link>http://localhost:1313/CStellDevlog/en/blog/cstell_blog0/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/blog/cstell_blog0/</guid>
      <description>&lt;h3 id=&#34;loading-models-in-cstell&#34;&gt;Loading models in CStell!&lt;/h3&gt;&#xA;&lt;p&gt;CStell uses .csmesh file to hold metadata to 3D intermediate format. Model class is container for these imported meshes and hold information about material associated with it.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;LoadingModels&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_LoadingModel.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;drag-n-drop-model-and-material-system&#34;&gt;Drag N&amp;rsquo; Drop model and material system&lt;/h3&gt;&#xA;&lt;p&gt;You can drag n&amp;rsquo; drop meshes(.csmesh) and materials(.csmat) to change them.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;DragNDrop&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_DragNDrop.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;shader-uniform-reflection&#34;&gt;Shader uniform reflection&lt;/h3&gt;&#xA;&lt;p&gt;Shader uniforms are automatically reflected to editor&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;ShaderReflection&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_ShaderReflection.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;instantaneous-material-reload&#34;&gt;Instantaneous material reload&lt;/h3&gt;&#xA;&lt;p&gt;Shaders can be recompiled restarting the whole engine.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;MaterialReload&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_MaterialReload.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constellation Engine Blog0</title>
      <link>http://localhost:1313/CStellDevlog/en/cstellblogs/cstell_blog0/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/cstellblogs/cstell_blog0/</guid>
      <description>&lt;h3 id=&#34;loading-models-in-cstell&#34;&gt;Loading models in CStell!&lt;/h3&gt;&#xA;&lt;p&gt;CStell uses .csmesh file to hold metadata to 3D intermediate format. Model class is container for these imported meshes and hold information about material associated with it.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;LoadingModels&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_LoadingModel.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;drag-n-drop-model-and-material-system&#34;&gt;Drag N&amp;rsquo; Drop model and material system&lt;/h3&gt;&#xA;&lt;p&gt;You can drag n&amp;rsquo; drop meshes(.csmesh) and materials(.csmat) to change them.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;DragNDrop&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_DragNDrop.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;shader-uniform-reflection&#34;&gt;Shader uniform reflection&lt;/h3&gt;&#xA;&lt;p&gt;Shader uniforms are automatically reflected to editor&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;ShaderReflection&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_ShaderReflection.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;instantaneous-material-reload&#34;&gt;Instantaneous material reload&lt;/h3&gt;&#xA;&lt;p&gt;Shaders can be recompiled without restarting the whole engine.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;MaterialReload&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/ConstellationEngine/Blog0/CStell_MaterialReload.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>In a Corner of the World Blog1</title>
      <link>http://localhost:1313/CStellDevlog/en/blog/icw_blog1/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/blog/icw_blog1/</guid>
      <description>&lt;h3 id=&#34;maintaining-same-pixel-size-across-all-materials&#34;&gt;Maintaining same pixel size across all materials&lt;/h3&gt;&#xA;&lt;p&gt;Shader parameter collection and world aligned texture has helped alot with majority of materials.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_ShaderParameterCollection.png&#34; alt=&#34;LSLP&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;dialog-system&#34;&gt;Dialog system&lt;/h3&gt;&#xA;&lt;p&gt;Inkpot plugin is used to integrate Ink narrative scripting language into our game. With Ink it is incredible that how easily we separated programming part with design part.&#xA;Inkpot is added as git submodule to our development repositary.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;DialogSystem&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_DialogSystem.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;Dialog system is designed as blueprint component, also designer doesn&amp;rsquo;t need to tinker with blueprints, he just need to change Ink script asset and give what items npc holds.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;ChangingInkScript&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_ChangingInkScript.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;Importing Ink scripts is pretty straight forward with Unreal Engine.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;ImportingInkScript&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_ImportingInkScript.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>In a Corner of the World Blog1</title>
      <link>http://localhost:1313/CStellDevlog/en/icwblogs/icw_blog1/</link>
      <pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/icwblogs/icw_blog1/</guid>
      <description>&lt;h3 id=&#34;maintaining-same-pixel-size-across-all-materials&#34;&gt;Maintaining same pixel size across all materials&lt;/h3&gt;&#xA;&lt;p&gt;Shader parameter collection and world aligned texture has helped alot with majority of materials.&lt;/p&gt;&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;ShaderParameter&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_ShaderParameter.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;&lt;h3 id=&#34;dialog-system&#34;&gt;Dialog system&lt;/h3&gt;&#xA;&lt;p&gt;Inkpot plugin is used to integrate Ink narrative scripting language into our game. With Ink it is incredible that how easily we separated programming part with design part.&#xA;Inkpot is added as git submodule to our development repositary.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;DialogSystem&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_DialogSystem.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;Dialog system is designed as blueprint component, also designer doesn&amp;rsquo;t need to tinker with blueprints, he just need to change Ink script asset and give what items npc holds.&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;ChangingInkScript&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog1/ICW_ChangingInkScript.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>In a Corner of the World</title>
      <link>http://localhost:1313/CStellDevlog/en/ongoing/inacorneroftheworld/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/ongoing/inacorneroftheworld/</guid>
      <description>&lt;h3 id=&#34;in-a-corner-of-the-world&#34;&gt;In a Corner of the World&lt;/h3&gt;&#xA;&lt;p&gt;In a small village far from the cities, is hiding something, not affecting the rest of the world. Lives far from village continue their daily cycle while sinisters at village prevails.&lt;/p&gt;&#xA;&lt;p&gt;In a Corner of the World is a small indie horror rpg presenting a story about a village which is far from the majority of the people resides these days. In that small forgotten village strange incidents started happening about couple of weeks ago. National Institute of Magic Research(NIMR) discovered a certain Magic Architure on a dark web site that shook the Magic Users all around the world. After further investigations Investigation Division at NIMR narrowed down suspects to be investigated, one of them is a village of Sunlit Plains.&lt;/p&gt;</description>
    </item>
    <item>
      <title>In a Corner of the World</title>
      <link>http://localhost:1313/CStellDevlog/en/project/inacorneroftheworld/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/project/inacorneroftheworld/</guid>
      <description>&lt;h3 id=&#34;in-a-corner-of-the-world&#34;&gt;In a Corner of the World&lt;/h3&gt;&#xA;&lt;p&gt;In a small village far from the cities, is hiding something, not affecting the rest of the world. Lives far from village continue their daily cycle while sinisters at village prevails.&lt;/p&gt;&#xA;&lt;p&gt;In a Corner of the World is a small indie horror rpg presenting a story about a village which is far from the majority of the people resides these days. In that small forgotten village strange incidents started happening about couple of weeks ago. National Institute of Magic Research(NIMR) discovered a certain Magic Architure on a dark web site that shook the Magic Users all around the world. After further investigations Investigation Division at NIMR narrowed down suspects to be investigated, one of them is a village of Sunlit Plains.&lt;/p&gt;</description>
    </item>
    <item>
      <title>In a Corner of the World Blog0</title>
      <link>http://localhost:1313/CStellDevlog/en/blog/icw_blog0/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/blog/icw_blog0/</guid>
      <description>&lt;h3 id=&#34;world-aligned-material&#34;&gt;World Aligned Material&lt;/h3&gt;&#xA;&lt;p&gt;Created world aligned material to maintain tiling of the texture&lt;/p&gt;&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;WorldAlignedMaterial&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog0/ICW_WorldAlignedMaterial.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;&lt;h3 id=&#34;landscape-layer-paint-for-pixellated-texture&#34;&gt;Landscape Layer Paint for Pixellated Texture&lt;/h3&gt;&#xA;&lt;p&gt;I experimented a lot and finally succeeded to blend pixellated texture with landscape layer paint&lt;/p&gt;&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;LandscapeLayerPaint&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog0/ICW_LandscapePaint.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s how I achieved pixellated edge&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog0/ICW_LSPaintMat.png&#34; alt=&#34;LSLP&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;importing-pixellated-textures&#34;&gt;Importing Pixellated Textures&lt;/h3&gt;&#xA;&lt;p&gt;Well that was fairly straight forward and also I can change brightness, hue and various parameters how convinient, I don&amp;rsquo;t need to hop into another software to do so.&lt;/p&gt;</description>
    </item>
    <item>
      <title>In a Corner of the World Blog0</title>
      <link>http://localhost:1313/CStellDevlog/en/icwblogs/icw_blog0/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/icwblogs/icw_blog0/</guid>
      <description>&lt;h3 id=&#34;world-aligned-material&#34;&gt;World Aligned Material&lt;/h3&gt;&#xA;&lt;p&gt;Created world aligned material to maintain tiling of the texture&lt;/p&gt;&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;WorldAlignedMaterial&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog0/ICW_WorldAlignedMaterial.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;&lt;h3 id=&#34;landscape-layer-paint-for-pixellated-texture&#34;&gt;Landscape Layer Paint for Pixellated Texture&lt;/h3&gt;&#xA;&lt;p&gt;I experimented a lot and finally succeeded to blend pixellated texture with landscape layer paint&lt;/p&gt;&#xA;&lt;video autoplay=&#34;&#34; loop=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; title= &#34;LandscapeLayerPaint&#34; &gt;&#xD;&#xA;  &lt;source src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog0/ICW_LandscapePaint.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;&lt;/video&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s how I achieved pixellated edge&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/CStellDevlog/InACornerOfTheWorld/Blog0/ICW_LSPaintMat.png&#34; alt=&#34;LSLP&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;importing-pixellated-textures&#34;&gt;Importing Pixellated Textures&lt;/h3&gt;&#xA;&lt;p&gt;Well that was fairly straight forward and also I can change brightness, hue and various parameters how convinient, I don&amp;rsquo;t need to hop into another software to do so.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constellation Engine</title>
      <link>http://localhost:1313/CStellDevlog/en/blog/constellationengine/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/blog/constellationengine/</guid>
      <description>&lt;h3 id=&#34;constellation-engine&#34;&gt;Constellation Engine&lt;/h3&gt;&#xA;&lt;p&gt;Rendering Constellations!&lt;/p&gt;&#xA;&lt;p&gt;3D Game Engine written in C++&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VedantS-32/ConstellationEngine.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Repository&lt;/a&gt;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;Git&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;clone-repository&#34;&gt;Clone repository&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recursive https://github.com/VedantS-32/ConstellationEngine.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-instructions&#34;&gt;Build Instructions&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Currently Windows only!&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go to &amp;ldquo;script&amp;rdquo; folder&lt;/li&gt;&#xA;&lt;li&gt;Run CStellSetup.bat&lt;/li&gt;&#xA;&lt;li&gt;Run Win-GenerateProject.bat. By default this will generate ConstellationEngine.sln, please change this script to generate makefile or project files for other ide.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;aims&#34;&gt;Aims&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To learn how game engines work under the hood&lt;/li&gt;&#xA;&lt;li&gt;Creating massive open worlds&lt;/li&gt;&#xA;&lt;li&gt;To be able to handle the scale of universe&lt;/li&gt;&#xA;&lt;li&gt;Accurate rendering and simulation of galactic bodies like galaxies, constellation etc&lt;/li&gt;&#xA;&lt;li&gt;To render unique semi-realistic artstyle&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Constellation Engine</title>
      <link>http://localhost:1313/CStellDevlog/en/ongoing/constellationengine/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/ongoing/constellationengine/</guid>
      <description>&lt;h3 id=&#34;constellation-engine&#34;&gt;Constellation Engine&lt;/h3&gt;&#xA;&lt;p&gt;Rendering Constellations!&lt;/p&gt;&#xA;&lt;p&gt;3D Game Engine written in C++&lt;/p&gt;&#xA;&lt;h3 id=&#34;cgraphicscore&#34;&gt;CGraphicsCore&lt;/h3&gt;&#xA;&lt;p&gt;Please visit CGraphicsCore repository for latest version Constellation Engine codebase&#xA;&lt;a href=&#34;https://github.com/VedantS-32/CGraphicsCore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CGraphicsCore&lt;/a&gt;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;3D renderer and framework for learning OpenGL. It is rewrite of Constellation Engine(CStell) for educational purpose and betterment of CStell.&lt;/p&gt;&#xA;&lt;p&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/VedantS-32/ConstellationEngine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Old Version&lt;/a&gt;&#xD;&#xA;&lt;/del&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ compiler(tested with gcc, clang and msvc)&lt;/li&gt;&#xA;&lt;li&gt;Make&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;Git&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;clone-repository&#34;&gt;Clone repository&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recursive https://github.com/VedantS-32/CGraphicsCore.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-instructions&#34;&gt;Build Instructions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go to &amp;ldquo;script&amp;rdquo; folder&lt;/li&gt;&#xA;&lt;li&gt;Note: Currently due to some platform specifics, CGraphicsCore doesn&amp;rsquo;t compile on Unix platforms, it will be supported in future&lt;/li&gt;&#xA;&lt;li&gt;Run CGraphicsSetup script for your platform&lt;/li&gt;&#xA;&lt;li&gt;Then run GenerateProject for your platform&lt;/li&gt;&#xA;&lt;li&gt;By default it will generate Makefile, please change Script/GenerateProject to generate project files for your IDE&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vendor/premake/bin/premake5.exe gmake2 &lt;span style=&#34;color:#6272a4&#34;&gt;#&amp;lt;-- Replace gmake2 with vs2022 for Visual Studio Solution&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;If you have generated Visual Studio Solution, .sln file will be in root directory&lt;/li&gt;&#xA;&lt;li&gt;if you have generated Makefile, open terminal in root directory and enter following command to build CGraphicsCore. After building go to CGraphicsSandbox and launch the binary (CGrpahicsSandbox.exe for Windows)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j &lt;span style=&#34;color:#6272a4&#34;&gt;#Number of core you want to allocate for compilation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Additionally you can specify build configuration and compiler&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CC&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; C_Compiler &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CXX&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; C++_Compiler &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;BuildConfig -j Cores&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Example&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    make &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CC&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;gcc &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CXX&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;g++ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;release -j &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;aims&#34;&gt;Aims&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To learn how game engines work under the hood&lt;/li&gt;&#xA;&lt;li&gt;Creating massive open worlds&lt;/li&gt;&#xA;&lt;li&gt;To be able to handle the scale of universe&lt;/li&gt;&#xA;&lt;li&gt;Accurate rendering and simulation of galactic bodies like galaxies, constellation etc&lt;/li&gt;&#xA;&lt;li&gt;To render unique semi-realistic artstyle&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Constellation Engine</title>
      <link>http://localhost:1313/CStellDevlog/en/project/constellationengine/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/CStellDevlog/en/project/constellationengine/</guid>
      <description>&lt;h3 id=&#34;constellation-engine&#34;&gt;Constellation Engine&lt;/h3&gt;&#xA;&lt;p&gt;Rendering Constellations!&lt;/p&gt;&#xA;&lt;p&gt;3D Game Engine written in C++&lt;/p&gt;&#xA;&lt;h3 id=&#34;cgraphicscore&#34;&gt;CGraphicsCore&lt;/h3&gt;&#xA;&lt;p&gt;Please visit CGraphicsCore repository for latest version Constellation Engine codebase&#xA;&lt;a href=&#34;https://github.com/VedantS-32/CGraphicsCore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CGraphicsCore&lt;/a&gt;&#xD;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;3D renderer and framework for learning OpenGL. It is rewrite of Constellation Engine(CStell) for educational purpose and betterment of CStell.&lt;/p&gt;&#xA;&lt;p&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/VedantS-32/ConstellationEngine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Old Version&lt;/a&gt;&#xD;&#xA;&lt;/del&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++ compiler(tested with gcc, clang and msvc)&lt;/li&gt;&#xA;&lt;li&gt;Make&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;Git&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;clone-repository&#34;&gt;Clone repository&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --recursive https://github.com/VedantS-32/CGraphicsCore.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-instructions&#34;&gt;Build Instructions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Go to &amp;ldquo;script&amp;rdquo; folder&lt;/li&gt;&#xA;&lt;li&gt;Note: Currently due to some platform specifics, CGraphicsCore doesn&amp;rsquo;t compile on Unix platforms, it will be supported in future&lt;/li&gt;&#xA;&lt;li&gt;Run CGraphicsSetup script for your platform&lt;/li&gt;&#xA;&lt;li&gt;Then run GenerateProject for your platform&lt;/li&gt;&#xA;&lt;li&gt;By default it will generate Makefile, please change Script/GenerateProject to generate project files for your IDE&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vendor/premake/bin/premake5.exe gmake2 &lt;span style=&#34;color:#6272a4&#34;&gt;#&amp;lt;-- Replace gmake2 with vs2022 for Visual Studio Solution&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;If you have generated Visual Studio Solution, .sln file will be in root directory&lt;/li&gt;&#xA;&lt;li&gt;if you have generated Makefile, open terminal in root directory and enter following command to build CGraphicsCore. After building go to CGraphicsSandbox and launch the binary (CGrpahicsSandbox.exe for Windows)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make -j &lt;span style=&#34;color:#6272a4&#34;&gt;#Number of core you want to allocate for compilation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Additionally you can specify build configuration and compiler&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CC&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; C_Compiler &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CXX&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; C++_Compiler &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;BuildConfig -j Cores&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Example&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    make &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CC&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;gcc &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CXX&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;g++ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;release -j &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;aims&#34;&gt;Aims&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To learn how game engines work under the hood&lt;/li&gt;&#xA;&lt;li&gt;Creating massive open worlds&lt;/li&gt;&#xA;&lt;li&gt;To be able to handle the scale of universe&lt;/li&gt;&#xA;&lt;li&gt;Accurate rendering and simulation of galactic bodies like galaxies, constellation etc&lt;/li&gt;&#xA;&lt;li&gt;To render unique semi-realistic artstyle&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
